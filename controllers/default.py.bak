# -*- coding: utf-8 -*-

import ConfigParser
import applications.SplunkeGSD.controllers.classes.module as module
import applications.SplunkeGSD.controllers.classes.team as team

def index(): # acts like initialisation. session.variablename allows the variable to be accessed between refreshes.
    config = ConfigParser.ConfigParser()
    config.read("/home/www-data/web2py/applications/SplunkeGSD/application.config")
    mod = module.module('Test Module', 50)
    te = mod.actualEffort
    session.test = team.team(10, 1)
    session.test.addModule(mod)
    redirect(URL('view'))
    
def map():
    return dict(
      googlemap_key='...',
      center_latitude = 41.878,
      center_longitude = -87.629,
      scale = 7,
      maker = lambda point: A(row.id,_href='...')
     )

def view():
    team = session.test
    team.applyEffort()
    modules=team.currentModules
    return dict(title=T('Home'), modules=modules)

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
